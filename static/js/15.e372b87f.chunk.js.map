{"version":3,"sources":["../node_modules/@material-ui/core/esm/NativeSelect/NativeSelectInput.js","../node_modules/@material-ui/core/esm/SvgIcon/SvgIcon.js","../node_modules/@material-ui/core/esm/internal/svg-icons/ArrowDropDown.js","../node_modules/@material-ui/core/esm/utils/createSvgIcon.js","../node_modules/@material-ui/core/esm/NativeSelect/NativeSelect.js","styles/styleComponents/StyledSelectInputs.ts","components/molecules/selectInputs/SelectInputs.tsx"],"names":["NativeSelectInput","React","props","ref","classes","className","disabled","IconComponent","inputRef","_props$variant","variant","other","_objectWithoutProperties","_extends","clsx","root","select","multiple","icon","concat","capitalize","SvgIcon","children","_props$color","color","_props$component","component","Component","_props$fontSize","fontSize","htmlColor","titleAccess","_props$viewBox","viewBox","focusable","undefined","role","muiName","withStyles","theme","userSelect","width","height","display","fill","flexShrink","typography","pxToRem","transition","transitions","create","duration","shorter","colorPrimary","palette","primary","main","colorSecondary","secondary","colorAction","action","active","colorError","error","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeLarge","name","createSvgIcon","path","displayName","createElement","memo","forwardRef","d","defaultInput","Input","NativeSelect","_props$IconComponent","ArrowDropDownIcon","_props$input","input","inputProps","muiFormControl","useFormControl","fcs","formControlState","states","inputComponent","type","borderRadius","minWidth","cursor","backgroundColor","background","paper","paddingRight","filled","outlined","shape","selectMenu","minHeight","textOverflow","whiteSpace","overflow","position","right","top","pointerEvents","iconOpen","transform","iconFilled","iconOutlined","nativeInput","bottom","left","opacity","StyledSelectsWrapper","styled","div","ShareFlexSpace","breakPoints","small","large","biglarge","StyledNativeSelect","minismall","bigsmall","SvgArrow","lazy","SelectInputs","control","setNewFromCurrency","setNewToCurrency","allCurrencies","useContext","TaskContext","handleChange","event","target","value","render","field","onChange","map","currency","view"],"mappings":"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","file":"static/js/15.e372b87f.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport capitalize from '../utils/capitalize';\n/**\n * @ignore - internal component.\n */\n\nvar NativeSelectInput = /*#__PURE__*/React.forwardRef(function NativeSelectInput(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      disabled = props.disabled,\n      IconComponent = props.IconComponent,\n      inputRef = props.inputRef,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"disabled\", \"IconComponent\", \"inputRef\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"select\", _extends({\n    className: clsx(classes.root, // TODO v5: merge root and select\n    classes.select, classes[variant], className, disabled && classes.disabled),\n    disabled: disabled,\n    ref: inputRef || ref\n  }, other)), props.multiple ? null : /*#__PURE__*/React.createElement(IconComponent, {\n    className: clsx(classes.icon, classes[\"icon\".concat(capitalize(variant))], disabled && classes.disabled)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelectInput.propTypes = {\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The CSS class name of the select element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the select will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType.isRequired,\n\n  /**\n   * Use that prop to pass a ref to the native select element.\n   * @deprecated\n   */\n  inputRef: refType,\n\n  /**\n   * @ignore\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Name attribute of the `select` or hidden `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The input value.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default NativeSelectInput;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      userSelect: 'none',\n      width: '1em',\n      height: '1em',\n      display: 'inline-block',\n      fill: 'currentColor',\n      flexShrink: 0,\n      fontSize: theme.typography.pxToRem(24),\n      transition: theme.transitions.create('fill', {\n        duration: theme.transitions.duration.shorter\n      })\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"action\"`. */\n    colorAction: {\n      color: theme.palette.action.active\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `color=\"disabled\"`. */\n    colorDisabled: {\n      color: theme.palette.action.disabled\n    },\n\n    /* Styles applied to the root element if `fontSize=\"inherit\"`. */\n    fontSizeInherit: {\n      fontSize: 'inherit'\n    },\n\n    /* Styles applied to the root element if `fontSize=\"small\"`. */\n    fontSizeSmall: {\n      fontSize: theme.typography.pxToRem(20)\n    },\n\n    /* Styles applied to the root element if `fontSize=\"large\"`. */\n    fontSizeLarge: {\n      fontSize: theme.typography.pxToRem(35)\n    }\n  };\n};\nvar SvgIcon = /*#__PURE__*/React.forwardRef(function SvgIcon(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'inherit' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'svg' : _props$component,\n      _props$fontSize = props.fontSize,\n      fontSize = _props$fontSize === void 0 ? 'default' : _props$fontSize,\n      htmlColor = props.htmlColor,\n      titleAccess = props.titleAccess,\n      _props$viewBox = props.viewBox,\n      viewBox = _props$viewBox === void 0 ? '0 0 24 24' : _props$viewBox,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"fontSize\", \"htmlColor\", \"titleAccess\", \"viewBox\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, color !== 'inherit' && classes[\"color\".concat(capitalize(color))], fontSize !== 'default' && classes[\"fontSize\".concat(capitalize(fontSize))]),\n    focusable: \"false\",\n    viewBox: viewBox,\n    color: htmlColor,\n    \"aria-hidden\": titleAccess ? undefined : true,\n    role: titleAccess ? 'img' : undefined,\n    ref: ref\n  }, other), children, titleAccess ? /*#__PURE__*/React.createElement(\"title\", null, titleAccess) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? SvgIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Node passed into the SVG element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.\n   */\n  color: PropTypes.oneOf(['action', 'disabled', 'error', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   */\n  fontSize: PropTypes.oneOf(['default', 'inherit', 'large', 'small']),\n\n  /**\n   * Applies a color attribute to the SVG element.\n   */\n  htmlColor: PropTypes.string,\n\n  /**\n   * The shape-rendering attribute. The behavior of the different options is described on the\n   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\n   * If you are having issues with blurry icons you should investigate this property.\n   */\n  shapeRendering: PropTypes.string,\n\n  /**\n   * Provides a human-readable title for the element that contains it.\n   * https://www.w3.org/TR/SVG-access/#Equivalent\n   */\n  titleAccess: PropTypes.string,\n\n  /**\n   * Allows you to redefine what the coordinates without units mean inside an SVG element.\n   * For example, if the SVG element is 500 (width) by 200 (height),\n   * and you pass viewBox=\"0 0 50 20\",\n   * this means that the coordinates inside the SVG will go from the top left corner (0,0)\n   * to bottom right (50,20) and each unit will be worth 10px.\n   */\n  viewBox: PropTypes.string\n} : void 0;\nSvgIcon.muiName = 'SvgIcon';\nexport default withStyles(styles, {\n  name: 'MuiSvgIcon'\n})(SvgIcon);","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7 10l5 5 5-5z\"\n}), 'ArrowDropDown');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport SvgIcon from '../SvgIcon';\n/**\n * Private module reserved for @material-ui/x packages.\n */\n\nexport default function createSvgIcon(path, displayName) {\n  var Component = function Component(props, ref) {\n    return /*#__PURE__*/React.createElement(SvgIcon, _extends({\n      ref: ref\n    }, props), path);\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Need to set `displayName` on the inner component for React.memo.\n    // React prior to 16.14 ignores `displayName` on the wrapper.\n    Component.displayName = \"\".concat(displayName, \"Icon\");\n  }\n\n  Component.muiName = SvgIcon.muiName;\n  return /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Component));\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport NativeSelectInput from './NativeSelectInput';\nimport withStyles from '../styles/withStyles';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the select component `root` class. */\n    root: {},\n\n    /* Styles applied to the select component `select` class. */\n    select: {\n      '-moz-appearance': 'none',\n      // Reset\n      '-webkit-appearance': 'none',\n      // Reset\n      // When interacting quickly, the text can end up selected.\n      // Native select can't be selected either.\n      userSelect: 'none',\n      borderRadius: 0,\n      // Reset\n      minWidth: 16,\n      // So it doesn't collapse.\n      cursor: 'pointer',\n      '&:focus': {\n        // Show that it's not an text input\n        backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',\n        borderRadius: 0 // Reset Chrome style\n\n      },\n      // Remove IE 11 arrow\n      '&::-ms-expand': {\n        display: 'none'\n      },\n      '&$disabled': {\n        cursor: 'default'\n      },\n      '&[multiple]': {\n        height: 'auto'\n      },\n      '&:not([multiple]) option, &:not([multiple]) optgroup': {\n        backgroundColor: theme.palette.background.paper\n      },\n      '&&': {\n        paddingRight: 24\n      }\n    },\n\n    /* Styles applied to the select component if `variant=\"filled\"`. */\n    filled: {\n      '&&': {\n        paddingRight: 32\n      }\n    },\n\n    /* Styles applied to the select component if `variant=\"outlined\"`. */\n    outlined: {\n      borderRadius: theme.shape.borderRadius,\n      '&&': {\n        paddingRight: 32\n      }\n    },\n\n    /* Styles applied to the select component `selectMenu` class. */\n    selectMenu: {\n      height: 'auto',\n      // Resets for multpile select with chips\n      minHeight: '1.1876em',\n      // Required for select\\text-field height consistency\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden'\n    },\n\n    /* Pseudo-class applied to the select component `disabled` class. */\n    disabled: {},\n\n    /* Styles applied to the icon component. */\n    icon: {\n      // We use a position absolute over a flexbox in order to forward the pointer events\n      // to the input and to support wrapping tags..\n      position: 'absolute',\n      right: 0,\n      top: 'calc(50% - 12px)',\n      // Center vertically\n      pointerEvents: 'none',\n      // Don't block pointer events on the select under the icon.\n      color: theme.palette.action.active,\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the icon component if the popup is open. */\n    iconOpen: {\n      transform: 'rotate(180deg)'\n    },\n\n    /* Styles applied to the icon component if `variant=\"filled\"`. */\n    iconFilled: {\n      right: 7\n    },\n\n    /* Styles applied to the icon component if `variant=\"outlined\"`. */\n    iconOutlined: {\n      right: 7\n    },\n\n    /* Styles applied to the underlying native input component. */\n    nativeInput: {\n      bottom: 0,\n      left: 0,\n      position: 'absolute',\n      opacity: 0,\n      pointerEvents: 'none',\n      width: '100%'\n    }\n  };\n};\nvar defaultInput = /*#__PURE__*/React.createElement(Input, null);\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\n\nvar NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      _props$IconComponent = props.IconComponent,\n      IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,\n      _props$input = props.input,\n      input = _props$input === void 0 ? defaultInput : _props$input,\n      inputProps = props.inputProps,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"IconComponent\", \"input\", \"inputProps\", \"variant\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant']\n  });\n  return /*#__PURE__*/React.cloneElement(input, _extends({\n    // Most of the logic is implemented in `NativeSelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: NativeSelectInput,\n    inputProps: _extends({\n      children: children,\n      classes: classes,\n      IconComponent: IconComponent,\n      variant: fcs.variant,\n      type: undefined\n    }, inputProps, input ? input.props.inputProps : {}),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * Attributes applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The input value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nNativeSelect.muiName = 'Select';\nexport default withStyles(styles, {\n  name: 'MuiNativeSelect'\n})(NativeSelect);","import styled from \"styled-components\";\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\nimport { breakPoints } from \"../breakPoints\";\nimport { ShareFlexSpace } from \"../share\";\n\nexport const StyledSelectsWrapper = styled.div`\n  ${ShareFlexSpace}\n  align-items: center;\n  width: 100%;\n  margin: 20px 0;\n  font-size: 1.4rem;\n  @media (orientation: landscape) and (min-width: ${breakPoints.small}px) {\n    margin: 50px 0;\n  }\n  @media (min-width: ${breakPoints.large}px) and (orientation: landscape) {\n    width: 80%;\n  }\n  @media (min-width: ${breakPoints.biglarge}px) and (orientation: landscape) {\n    width: 100%;\n  }\n`;\nexport const StyledNativeSelect = styled(NativeSelect)`\n  background: var(--unnamed-color-ffffff) 0% 0% no-repeat padding-box;\n  box-shadow: 3px 3px 7px var(--unnamed-color-c2cbd9);\n  border-radius: 5px;\n  width: 150px;\n  height: 36px;\n  padding: 0 15px;\n  opacity: 1;\n  @media (min-width: ${breakPoints.minismall}px) {\n    height: 56px;\n  }\n  && .MuiNativeSelect-icon {\n    margin-right: 15px;\n  }\n  @media (orientation: landscape) and (min-width: ${breakPoints.small}px) {\n    height: 12px;\n  }\n  @media (orientation: landscape) and (min-width: ${breakPoints.bigsmall}px) {\n    height: 16px;\n  }\n  @media (orientation: landscape) and (min-width: 600px) {\n    height: 36px;\n  }\n  @media (min-width: ${breakPoints.large}px) and (orientation: landscape) {\n    height: 40px;\n  }\n  @media (orientation: landscape) and (min-width: ${breakPoints.biglarge}px) {\n    height: 56px;\n  }\n`;\n","import React, { useContext, lazy } from \"react\";\nimport { Controller } from \"react-hook-form\";\nimport TaskContext from \"../../../context/tasks/taskContext\";\nimport { SelectInputsProps } from \"./typesTS\";\nimport {\n  StyledSelectsWrapper,\n  StyledNativeSelect,\n} from \"../../../styles/styleComponents/StyledSelectInputs\";\nconst SvgArrow = lazy(() => import(\"../../atoms/svgArrow/SvgArrow\"));\n\nconst SelectInputs: React.FC<SelectInputsProps> = ({\n  control,\n  setNewFromCurrency,\n  setNewToCurrency,\n}: SelectInputsProps) => {\n  const taskContext = useContext(TaskContext);\n  const { allCurrencies } = taskContext || {};\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n    const name = event.target.name;\n    const value = event.target.value;\n    name === \"fromCurrency\"\n      ? setNewFromCurrency(value)\n      : setNewToCurrency(value);\n  };\n\n  return (\n    <StyledSelectsWrapper>\n      <Controller\n        name=\"fromCurrency\"\n        control={control}\n        render={({ field }) => (\n          <StyledNativeSelect {...field} onChange={handleChange}>\n            {allCurrencies?.map((currency) => (\n              <option key={currency} value={currency}>\n                {currency}\n              </option>\n            ))}\n          </StyledNativeSelect>\n        )}\n      />\n      <SvgArrow view=\"true\">\n        <path\n          className=\"b\"\n          transform=\"rotate(180 12 12) translate(4, 5)\"\n          d=\"M16.01,11H4v2H16.01v3L20,12,16.01,8Z\"\n        />\n      </SvgArrow>\n      <Controller\n        name=\"toCurrency\"\n        control={control}\n        render={({ field }) => (\n          <StyledNativeSelect {...field} onChange={handleChange}>\n            {allCurrencies?.map((currency) => (\n              <option key={currency} value={currency}>\n                {currency}\n              </option>\n            ))}\n          </StyledNativeSelect>\n        )}\n      />\n    </StyledSelectsWrapper>\n  );\n};\n\nexport default SelectInputs;\n"],"sourceRoot":""}