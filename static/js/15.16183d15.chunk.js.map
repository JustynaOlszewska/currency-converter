{"version":3,"sources":["styles/styleComponents/StyledForm.ts","components/organism/form/validation.ts","components/organism/form/Form.tsx","utilities.ts"],"names":["StyledH1","styled","h1","breakPoints","large","biglarge","StyledWrapperSectionForm","section","ShareFlexColumn","StyledForm","form","schema","yup","shape","amount","positive","required","fromCurrency","toCurrency","Button","lazy","SelectInputs","NumberInputs","Form","taskContext","useContext","TaskContext","historyContext","HistoryContext","exchangeRate","allCurrencies","amountToHistory","getCurrencies","getExchangeRate","currency","find","index","array","setHistoryMemory","useState","newFromCurrency","setNewFromCurrency","newToCurrency","setNewToCurrency","useEffect","currentDate","Date","day","getDate","toString","month","getMonth","year","getFullYear","Number","useForm","resolver","yupResolver","control","handleSubmit","formState","errors","onSubmit","data"],"mappings":"gOAIaA,EAAWC,UAAOC,GAAV,idASEC,IAAYC,MAIZD,IAAYE,UAKtBC,EAA2BL,UAAOM,QAAV,wYACjCC,IASmBL,IAAYC,MAGZD,IAAYE,UAKtBI,EAAaR,UAAOS,KAAV,oLACnBF,IAImBL,IAAYC,O,SC3CtBO,EAASC,MAAaC,MAAM,CACvCC,OAAQF,MAAaG,WAAWC,WAChCC,aAAcL,MACdM,WAAYN,Q,OCQRO,EAASC,gBAAK,kBAAM,iCACpBC,EAAeD,gBACnB,kBAAM,wDAEFE,EAAeF,gBACnB,kBAAM,wDAiFOG,UA9EQ,WACrB,IAAMC,EAAcC,qBAAWC,KACzBC,EAAiBF,qBAAWG,KAElC,EAMIJ,GAAe,GALjBK,EADF,EACEA,aACAC,EAFF,EAEEA,cACQC,EAHV,EAGEjB,OACAkB,EAJF,EAIEA,cACAC,EALF,EAKEA,gBAGIC,EAAQ,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAeK,MAAK,SAACD,EAAUE,EAAOC,GAAlB,OAA4BA,EAAM,MAE/DC,GAAqBX,GAAkB,IAAvCW,iBAER,EAA8CC,mBAAiB,IAA/D,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA0CF,mBAAiB,IAA3D,mBAAOG,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,WACHZ,GACLA,MACC,IAEHY,qBAAU,WACHf,GAAiBS,GAAqBP,GAC3CO,EC/CuB,WACzB,IAAMO,EAAc,IAAIC,KACpBC,EAAMF,EAAYG,UAAUC,WAC5BC,GAASL,EAAYM,WAAa,GAAGF,WACnCG,EAAOP,EAAYQ,cAAcJ,WAIvC,OAHAK,OAAOP,GAAO,KAAOA,EAAG,WAAOA,IAC/BO,OAAOJ,GAAS,KAAOA,EAAK,WAAOA,IACtB,UAAMH,EAAN,YAAaG,EAAb,YAAsBE,GDyC/BP,GACAd,EACAF,EACAW,EACAE,KAED,CAACb,IAEJe,qBAAU,WACHV,IACLO,EAAmBP,GACnBS,EAAiBT,MAChB,CAACA,IAEJ,MAIIqB,YAAoB,CACtBC,SAAUC,YAAY9C,KAJtB+C,EADF,EACEA,QACAC,EAFF,EAEEA,aAKM7C,GAPR,EAGE8C,UAAaC,QAIc,IAArB/C,OAQR,OACE,eAACR,EAAD,WACE,cAACN,EAAD,8BACA,eAACS,EAAD,CAAYqD,SAAUH,GATkB,SAACI,GAC3C,IAAQjD,EAAWiD,EAAXjD,OACHmB,GACLA,EAAgBO,EAAiBE,EAAeY,OAAOxC,OAMrD,UACE,cAACQ,EAAD,CACEY,SAAUA,EACVwB,QAASA,EACThB,cAAeA,EACfF,gBAAiBA,EACjB1B,OAAQA,IAEV,cAACO,EAAD,CACEqC,QAASA,EACTjB,mBAAoBA,EACpBE,iBAAkBA,IAEpB,cAACxB,EAAD","file":"static/js/15.16183d15.chunk.js","sourcesContent":["import { breakPoints } from \"../breakPoints\";\nimport styled from \"styled-components\";\nimport { ShareFlexColumn } from \"../share\";\n\nexport const StyledH1 = styled.h1`\n  font-size: 2rem;\n  font-weight: var(--unnamed-font-weight-bold);\n  line-height: 47px;\n  color: var(--unnamed-color-3578eb);\n  text-align: center;\n  @media (min-width: 600px) {\n    font-size: 2.19rem;\n  }\n  @media (min-width: ${breakPoints.large}px) and (orientation: landscape) {\n    margin: 70px 70px 25px 70px;\n    text-align: left;\n  }\n  @media (min-width: ${breakPoints.biglarge}px) and (orientation: landscape) {\n    margin: 100px 151px 25px 154px;\n  }\n`;\n\nexport const StyledWrapperSectionForm = styled.section`\n  ${ShareFlexColumn}\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  z-index: 3;\n  background: var(--unnamed-color-ffffff) 0% 0% no-repeat padding-box;\n  border-radius: 20px;\n  @media (min-width: ${breakPoints.large}px) and (orientation: landscape) {\n    width: 400px;\n  }\n  @media (min-width: ${breakPoints.biglarge}px) and (orientation: landscape) {\n    width: 600px;\n  }\n`;\n\nexport const StyledForm = styled.form`\n  ${ShareFlexColumn}\n  align-self: center;\n  align-items: center;\n  width: 80%;\n  @media (min-width: ${breakPoints.large}px) and (orientation: landscape) {\n    width: 400px;\n  }\n`;\n","import * as yup from \"yup\";\n\nexport const schema = yup.object().shape({\n  amount: yup.number().positive().required(),\n  fromCurrency: yup.string(),\n  toCurrency: yup.string(),\n});\n","import React, { useContext, useEffect, useState, lazy } from \"react\";\nimport { useForm, SubmitHandler } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport TaskContext from \"../../../context/tasks/taskContext\";\nimport HistoryContext from \"../../../context/history/historyContext\";\nimport { currentDate } from \"../../../utilities\";\nimport { IFormInput } from \"./typesTS\";\nimport {\n  StyledH1,\n  StyledWrapperSectionForm,\n  StyledForm,\n} from \"../../../styles/styleComponents/StyledForm\";\nimport { schema } from \"./validation\";\nconst Button = lazy(() => import(\"../../atoms/button/Button\"));\nconst SelectInputs = lazy(\n  () => import(\"../../molecules/selectInputs/SelectInputs\")\n);\nconst NumberInputs = lazy(\n  () => import(\"../../molecules/numberInputs/NumberInputs\")\n);\n\nconst Form: React.FC = () => {\n  const taskContext = useContext(TaskContext);\n  const historyContext = useContext(HistoryContext);\n\n  const {\n    exchangeRate,\n    allCurrencies,\n    amount: amountToHistory,\n    getCurrencies,\n    getExchangeRate,\n  } = taskContext || {};\n\n  const currency = allCurrencies?.find((currency, index, array) => array[0]);\n\n  const { setHistoryMemory } = historyContext || {};\n\n  const [newFromCurrency, setNewFromCurrency] = useState<string>(\"\");\n  const [newToCurrency, setNewToCurrency] = useState<string>(\"\");\n\n  useEffect((): void => {\n    if (!getCurrencies) return;\n    getCurrencies();\n  }, []);\n\n  useEffect((): void => {\n    if (!exchangeRate || !setHistoryMemory || !amountToHistory) return;\n    setHistoryMemory(\n      currentDate(),\n      amountToHistory,\n      exchangeRate,\n      newFromCurrency,\n      newToCurrency\n    );\n  }, [exchangeRate]);\n\n  useEffect((): void => {\n    if (!currency) return;\n    setNewFromCurrency(currency);\n    setNewToCurrency(currency);\n  }, [currency]);\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<IFormInput>({\n    resolver: yupResolver(schema),\n  });\n  const { amount } = errors || {};\n\n  const onSubmit: SubmitHandler<IFormInput> = (data) => {\n    const { amount } = data;\n    if (!getExchangeRate) return;\n    getExchangeRate(newFromCurrency, newToCurrency, Number(amount));\n  };\n\n  return (\n    <StyledWrapperSectionForm>\n      <StyledH1>Konwerter walut</StyledH1>\n      <StyledForm onSubmit={handleSubmit(onSubmit)}>\n        <NumberInputs\n          currency={currency}\n          control={control}\n          newToCurrency={newToCurrency}\n          newFromCurrency={newFromCurrency}\n          amount={amount}\n        />\n        <SelectInputs\n          control={control}\n          setNewFromCurrency={setNewFromCurrency}\n          setNewToCurrency={setNewToCurrency}\n        />\n        <Button />\n      </StyledForm>\n    </StyledWrapperSectionForm>\n  );\n};\n\nexport default Form;\n","export const currentDate = (): string => {\n  const currentDate = new Date();\n  let day = currentDate.getDate().toString();\n  let month = (currentDate.getMonth() + 1).toString();\n  const year = currentDate.getFullYear().toString();\n  Number(day) < 10 && (day = `0${day}`);\n  Number(month) < 10 && (month = `0${month}`);\n  const current = `${day}.${month}.${year}`;\n  return current;\n};\n"],"sourceRoot":""}