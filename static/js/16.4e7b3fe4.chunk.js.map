{"version":3,"sources":["components/organism/form/validation.ts","hooks/useSubmit/useSubmit.ts","styles/styleComponents/StyledForm.ts","components/organism/form/Form.tsx","utilities.ts"],"names":["schema","yup","shape","amount","positive","required","fromCurrency","toCurrency","useSubmit","dataToScore","useForm","resolver","yupResolver","control","handleSubmit","formState","errors","onSubmit","data","getExchangeRate","newFromCurrency","newToCurrency","Number","StyledH1","styled","h1","breakPoints","large","biglarge","StyledWrapperSectionForm","section","ShareFlexColumn","StyledForm","form","Button","lazy","SelectInputs","NumberInputs","Form","taskContext","useContext","TaskContext","historyContext","HistoryContext","exchangeRate","allCurrencies","amountToHistory","getCurrencies","currency","find","index","array","setHistoryMemory","useState","setNewFromCurrency","setNewToCurrency","useEffect","currentDate","Date","day","getDate","toString","month","getMonth","year","getFullYear"],"mappings":"2MAEaA,EAASC,MAAaC,MAAM,CACvCC,OAAQF,MAAaG,WAAWC,WAChCC,aAAcL,MACdM,WAAYN,QCoCCO,EA7BG,SAChBC,GAOA,MAIIC,YAAoB,CACtBC,SAAUC,YAAYZ,KAaxB,MAAO,CAAEa,QAlBT,EACEA,QAiBgBC,aAlBlB,EAEEA,aAgB8BX,QAlBhC,EAGEY,UAAaC,QAIc,IAArBb,OAWgCc,SATI,SAACC,GAC3C,IAAQf,EAAWe,EAAXf,OACHM,EAAYU,iBACjBV,EAAYU,gBACVV,EAAYW,gBACZX,EAAYY,cACZC,OAAOnB,O,8BC/BAoB,EAAWC,UAAOC,GAAV,idASEC,IAAYC,MAIZD,IAAYE,UAKtBC,EAA2BL,UAAOM,QAAV,wYACjCC,IASmBL,IAAYC,MAGZD,IAAYE,UAKtBI,EAAaR,UAAOS,KAAV,oLACnBF,IAImBL,IAAYC,O,OCnC7BO,EAASC,gBAAK,kBAAM,iCACpBC,EAAeD,gBACnB,kBAAM,wDAEFE,EAAeF,gBACnB,kBAAM,wDAwEOG,UArEQ,WACrB,IAAMC,EAAcC,qBAAWC,KACzBC,EAAiBF,qBAAWG,KAElC,EAMIJ,GAAe,GALjBK,EADF,EACEA,aACAC,EAFF,EAEEA,cACQC,EAHV,EAGE3C,OACA4C,EAJF,EAIEA,cACA5B,EALF,EAKEA,gBAGI6B,EAAQ,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAeI,MAAK,SAACD,EAAUE,EAAOC,GAAlB,OAA4BA,EAAM,MAE/DC,GAAqBV,GAAkB,IAAvCU,iBAER,EAA8CC,mBAAiB,IAA/D,mBAAOjC,EAAP,KAAwBkC,EAAxB,KACA,EAA0CD,mBAAiB,IAA3D,mBAAOhC,EAAP,KAAsBkC,EAAtB,KAEAC,qBAAU,WACHT,GACLA,MACC,IAEHS,qBAAU,WACHZ,GAAiBQ,GAAqBN,GAC3CM,EC5CuB,WACzB,IAAMK,EAAc,IAAIC,KACpBC,EAAMF,EAAYG,UAAUC,WAC5BC,GAASL,EAAYM,WAAa,GAAGF,WACnCG,EAAOP,EAAYQ,cAAcJ,WAIvC,OAHAvC,OAAOqC,GAAO,KAAOA,EAAG,WAAOA,IAC/BrC,OAAOwC,GAAS,KAAOA,EAAK,WAAOA,IACtB,UAAMH,EAAN,YAAaG,EAAb,YAAsBE,GDsC/BP,GACAX,EACAF,EACAxB,EACAC,KAED,CAACuB,IAEJY,qBAAU,WACHR,IACLM,EAAmBN,GACnBO,EAAiBP,MAChB,CAACA,IAEJ,MAAoDxC,EAAU,CAC5DW,kBACAC,kBACAC,kBAHMR,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,aAAcX,EAA/B,EAA+BA,OAAQc,EAAvC,EAAuCA,SAMvC,OACE,eAACY,EAAD,WACE,cAACN,EAAD,8BACA,eAACS,EAAD,CAAYf,SAAUH,EAAaG,GAAnC,UACE,cAACoB,EAAD,CACEW,SAAUA,EACVnC,QAASA,EACTQ,cAAeA,EACfD,gBAAiBA,EACjBjB,OAAQA,IAEV,cAACiC,EAAD,CACEvB,QAASA,EACTyC,mBAAoBA,EACpBC,iBAAkBA,IAEpB,cAACrB,EAAD","file":"static/js/16.4e7b3fe4.chunk.js","sourcesContent":["import * as yup from \"yup\";\n\nexport const schema = yup.object().shape({\n  amount: yup.number().positive().required(),\n  fromCurrency: yup.string(),\n  toCurrency: yup.string(),\n});\n","import {\n  useForm,\n  SubmitHandler,\n  Control,\n  UseFormHandleSubmit,\n  FieldError,\n} from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { IFormInput } from \"../../components/organism/form/typesTS\";\nimport { schema } from \"../../components/organism/form/validation\";\nimport { UseSubmitProps } from \"./typesTS\";\n\nconst useSubmit = (\n  dataToScore: UseSubmitProps\n): {\n  control: Control<IFormInput>;\n  handleSubmit: UseFormHandleSubmit<IFormInput>;\n  amount?: FieldError;\n  onSubmit: SubmitHandler<IFormInput>;\n} => {\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<IFormInput>({\n    resolver: yupResolver(schema),\n  });\n  const { amount } = errors || {};\n\n  const onSubmit: SubmitHandler<IFormInput> = (data) => {\n    const { amount } = data;\n    if (!dataToScore.getExchangeRate) return;\n    dataToScore.getExchangeRate(\n      dataToScore.newFromCurrency,\n      dataToScore.newToCurrency,\n      Number(amount)\n    );\n  };\n  return { control, handleSubmit, amount, onSubmit };\n};\n\nexport default useSubmit;\n","import { breakPoints } from \"../breakPoints\";\nimport styled from \"styled-components\";\nimport { ShareFlexColumn } from \"../share\";\n\nexport const StyledH1 = styled.h1`\n  font-size: 2rem;\n  font-weight: var(--unnamed-font-weight-bold);\n  line-height: 47px;\n  color: var(--unnamed-color-3578eb);\n  text-align: center;\n  @media (min-width: 600px) {\n    font-size: 2.19rem;\n  }\n  @media (min-width: ${breakPoints.large}px) and (orientation: landscape) {\n    margin: 70px 70px 25px 70px;\n    text-align: left;\n  }\n  @media (min-width: ${breakPoints.biglarge}px) and (orientation: landscape) {\n    margin: 100px 151px 25px 154px;\n  }\n`;\n\nexport const StyledWrapperSectionForm = styled.section`\n  ${ShareFlexColumn}\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  z-index: 3;\n  background: var(--unnamed-color-ffffff) 0% 0% no-repeat padding-box;\n  border-radius: 20px;\n  @media (min-width: ${breakPoints.large}px) and (orientation: landscape) {\n    width: 400px;\n  }\n  @media (min-width: ${breakPoints.biglarge}px) and (orientation: landscape) {\n    width: 600px;\n  }\n`;\n\nexport const StyledForm = styled.form`\n  ${ShareFlexColumn}\n  align-self: center;\n  align-items: center;\n  width: 80%;\n  @media (min-width: ${breakPoints.large}px) and (orientation: landscape) {\n    width: 400px;\n  }\n`;\n","import React, { useContext, useEffect, useState, lazy } from \"react\";\nimport TaskContext from \"../../../context/tasks/taskContext\";\nimport HistoryContext from \"../../../context/history/historyContext\";\nimport { currentDate } from \"../../../utilities\";\nimport useSubmit from \"../../../hooks/useSubmit/useSubmit\";\nimport {\n  StyledH1,\n  StyledWrapperSectionForm,\n  StyledForm,\n} from \"../../../styles/styleComponents/StyledForm\";\nconst Button = lazy(() => import(\"../../atoms/button/Button\"));\nconst SelectInputs = lazy(\n  () => import(\"../../molecules/selectInputs/SelectInputs\")\n);\nconst NumberInputs = lazy(\n  () => import(\"../../molecules/numberInputs/NumberInputs\")\n);\n\nconst Form: React.FC = () => {\n  const taskContext = useContext(TaskContext);\n  const historyContext = useContext(HistoryContext);\n\n  const {\n    exchangeRate,\n    allCurrencies,\n    amount: amountToHistory,\n    getCurrencies,\n    getExchangeRate,\n  } = taskContext || {};\n\n  const currency = allCurrencies?.find((currency, index, array) => array[0]);\n\n  const { setHistoryMemory } = historyContext || {};\n\n  const [newFromCurrency, setNewFromCurrency] = useState<string>(\"\");\n  const [newToCurrency, setNewToCurrency] = useState<string>(\"\");\n\n  useEffect((): void => {\n    if (!getCurrencies) return;\n    getCurrencies();\n  }, []);\n\n  useEffect((): void => {\n    if (!exchangeRate || !setHistoryMemory || !amountToHistory) return;\n    setHistoryMemory(\n      currentDate(),\n      amountToHistory,\n      exchangeRate,\n      newFromCurrency,\n      newToCurrency\n    );\n  }, [exchangeRate]);\n\n  useEffect((): void => {\n    if (!currency) return;\n    setNewFromCurrency(currency);\n    setNewToCurrency(currency);\n  }, [currency]);\n\n  const { control, handleSubmit, amount, onSubmit } = useSubmit({\n    getExchangeRate,\n    newFromCurrency,\n    newToCurrency,\n  });\n\n  return (\n    <StyledWrapperSectionForm>\n      <StyledH1>Konwerter walut</StyledH1>\n      <StyledForm onSubmit={handleSubmit(onSubmit)}>\n        <NumberInputs\n          currency={currency}\n          control={control}\n          newToCurrency={newToCurrency}\n          newFromCurrency={newFromCurrency}\n          amount={amount}\n        />\n        <SelectInputs\n          control={control}\n          setNewFromCurrency={setNewFromCurrency}\n          setNewToCurrency={setNewToCurrency}\n        />\n        <Button />\n      </StyledForm>\n    </StyledWrapperSectionForm>\n  );\n};\n\nexport default Form;\n","export const currentDate = (): string => {\n  const currentDate = new Date();\n  let day = currentDate.getDate().toString();\n  let month = (currentDate.getMonth() + 1).toString();\n  const year = currentDate.getFullYear().toString();\n  Number(day) < 10 && (day = `0${day}`);\n  Number(month) < 10 && (month = `0${month}`);\n  const current = `${day}.${month}.${year}`;\n  return current;\n};\n"],"sourceRoot":""}